{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","TOPOL_OPTIONS","id","authorize","apiKey","userId","language","templateId","title","topBarOptions","light","callbacks","onSaveAndClose","json","html","onSave","onTestSend","email","console","log","useEffect","script","document","createElement","src","type","body","appendChild","window","TopolPlugin","init","style","position","width","height","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2NAmHeA,MA/Gf,WACE,IAAMC,EAAgB,CACpBC,GAAI,OACJC,UAAW,CACPC,OAAQ,+DACRC,OAAQ,OAEZC,SAAU,KACVC,WAAY,EACZC,MAAO,sBACPC,cAAe,CACb,WACA,gBACA,cACA,kBACA,eACA,QAEFC,OAAO,EACPC,UAAW,CACTC,eAAgB,SAASC,EAAMC,KAQ/BC,OAAQ,SAASF,EAAMC,KAMvBE,WAAY,SAAUC,EAAOJ,EAAMC,GAEjCI,QAAQC,IAAIL,GAEZI,QAAQC,IAAIN,GAEZK,QAAQC,IAAIF,MA+DlB,OA7BAG,qBAAU,WACR,IAAMC,EAASC,SAASC,cAAc,UAEtCF,EAAOG,IAAM,gEACbH,EAAOI,KAAK,kBAEZH,SAASI,KAAKC,YAAYN,GAENO,OAAOC,YACfC,KAAK7B,KAiBjB,CAACA,IAID,kBAAC,WAAD,KACE,yBAAKC,GAAG,MAAM6B,MAAO,CAACC,SAAU,WAAYC,MAAO,OAAQC,OAAQ,YCjGrDC,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnB,SAASoB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.079bfba1.chunk.js","sourcesContent":["import React,{Fragment, useEffect} from 'react';\nimport './App.css';\n// import TopolPlugin from './main'\n\nfunction App() {\n  const TOPOL_OPTIONS = {\n    id: \"#app\",\n    authorize: {\n        apiKey: \"ROlqfYqOewVitHFKc3FHesLLu9D14EGoMETkQHLpdFtCHwTKEt7J91WXDmQG\",\n        userId: \"001\",\n    },\n    language: \"en\",\n    templateId: 1,\n    title: \"My template builder\",\n    topBarOptions: [\n      \"undoRedo\", \n      \"changePreview\", \n      \"previewSize\", \n      \"previewTestMail\",\n      \"saveAndClose\",\n      \"save\"\n    ],\n    light: true,\n    callbacks: {\n      onSaveAndClose: function(json, html) {\n        // HTML of the email\n        //console.log(html);\n        // JSON object of the email\n        //console.log(json);\n        // Implement your own close callback\n        // Data variable contains the response data of the save request\n      },\n      onSave: function(json, html) {\n        // HTML of the email\n        //console.log(html);\n        // JSON object of the email\n        //console.log(json);\n      },\n      onTestSend: function (email, json, html) {\n        // HTML of the email\n        console.log(html);\n        // JSON object of the email\n        console.log(json);\n        // Email of the recipient\n        console.log(email);\n        // Callback when send test email button is clicked\n      },\n      // onOpenFileManager: function () {\n      //   // Implement your own file manager open callback\n      // },\n      // onAutoSave(json) {\n      //     // Called when the editor decides that it needs an autosave. Mostly when the user makes a change and does not save it immediately.\n      //     console.log(json);\n      // },\n      // onBlockSave(json) {\n      //     var name = window.prompt('Enter block name:')\n      //     if (name !== null) {\n      //         console.log('saving block', json)\n      //     }\n      // },\n      // onBlockRemove(id) {\n      //     if (window.confirm('Are you sure?')) {\n      //         console.log('removing block', id)\n      //     }\n      // },\n      // onBlockEdit(id) {\n      //     var name = window.prompt('Block name:', 'My block 001')\n      //     if (name !== null) {\n      //         console.log('saving edited block', id)\n      //     }\n      // },\n      // onInit() {\n      //   //Called when editor is loaded\n      // }\n\n    }\n  };\n\n  useEffect(() => {\n    const script = document.createElement(\"script\");\n \n    script.src = \"https://d5aoblv5p04cg.cloudfront.net/editor-2/loader/build.js\";\n    script.type=\"text/javascript\"\n \n    document.body.appendChild(script);\n\n    const TopolPlugin = window.TopolPlugin;\n    TopolPlugin.init(TOPOL_OPTIONS);\n    // TopolPlugin.save();\n    // TopolPlugin.togglePreview();\n    // TopolPlugin.setSavedBlocks([\n    //   {\n    //     'id': 11,\n    //     'name': 'My saved block - by setSavedBlocks',\n    //     'definition': [{ \"tagName\": \"mj-section\", \"attributes\": { \"full-width\": false, \"padding\": \"9px 0px 9px 0px\", \"background-color\": \"#000000\" }, \"type\": null, \"children\": [{ \"tagName\": \"mj-column\", \"attributes\": { \"width\": \"33.333333%\", \"vertical-align\": \"top\" }, \"children\": [{ \"tagName\": \"mj-social\", \"attributes\": { \"display\": \"facebook:url twitter:url google:url\", \"padding\": \"10px 10px 10px 30px\", \"text-mode\": \"false\", \"icon-size\": \"25px\", \"base-url\": \"https://s3-eu-west-1.amazonaws.com/ecomail-assets/editor/social-icos/simplewhite/\", \"facebook-href\": \"https://www.facebook.com/PROFILE\", \"facebook-icon-color\": \"none\", \"facebook-alt\": \"Sdílet\", \"twitter-href\": \"https://www.twitter.com/PROFILE\", \"twitter-icon-color\": \"none\", \"twitter-alt\": \"\", \"google-href\": \"https://plus.google.com/PROFILE\", \"google-icon-color\": \"none\", \"google-alt\": \"\", \"instagram-icon-color\": \"none\", \"linkedin-icon-color\": \"none\", \"align\": \"left\", \"youtube-icon-color\": \"none\", \"youtube-alt\": \"\", \"youtube-icon\": \"https://s3-eu-west-1.amazonaws.com/ecomail-assets/editor/social-icos/simplewhite/youtube.png\", \"youtube-href\": \"https://www.youtube.com\", \"containerWidth\": 200 }, \"uid\": \"H1lqIiX4lm\" }], \"uid\": \"SJ3I0XVx7\" }, { \"tagName\": \"mj-column\", \"attributes\": { \"width\": \"33.333333%\", \"vertical-align\": \"top\" }, \"children\": [{ \"tagName\": \"mj-image\", \"attributes\": { \"src\": \"https://storage.googleapis.com/jan50/blackberrylogo.png\", \"padding\": \"19px 10px 10px 10px\", \"alt\": \"\", \"href\": \"\", \"containerWidth\": 200, \"width\": 100, \"widthPercent\": 50 }, \"uid\": \"rkEyL-HeQ\" }], \"uid\": \"r1e280m4xQ\" }, { \"tagName\": \"mj-column\", \"attributes\": { \"width\": \"33.333333%\", \"vertical-align\": \"top\" }, \"children\": [{ \"tagName\": \"mj-spacer\", \"attributes\": { \"height\": 15, \"containerWidth\": 200 }, \"uid\": \"rJfqLiXEgm\" }], \"uid\": \"B1W380QVxX\" }], \"layout\": 1, \"backgroundColor\": \"\", \"backgroundImage\": \"\", \"paddingTop\": 0, \"paddingBottom\": 0, \"paddingLeft\": 0, \"paddingRight\": 0, \"uid\": \"rkqIjQNe7\" }]\n    //   },\n    //   {\n    //     'id': 12,\n    //     'img': 'https://d5aoblv5p04cg.cloudfront.net/editor/blocks/menu1.jpg',\n    //     'definition': [{ \"tagName\": \"mj-section\", \"attributes\": { \"full-width\": false, \"padding\": \"9px 0px 9px 0px\", \"background-color\": \"#000000\" }, \"type\": null, \"children\": [{ \"tagName\": \"mj-column\", \"attributes\": { \"width\": \"33.333333%\", \"vertical-align\": \"top\" }, \"children\": [{ \"tagName\": \"mj-social\", \"attributes\": { \"display\": \"facebook:url twitter:url google:url\", \"padding\": \"10px 10px 10px 30px\", \"text-mode\": \"false\", \"icon-size\": \"25px\", \"base-url\": \"https://s3-eu-west-1.amazonaws.com/ecomail-assets/editor/social-icos/simplewhite/\", \"facebook-href\": \"https://www.facebook.com/PROFILE\", \"facebook-icon-color\": \"none\", \"facebook-alt\": \"Sdílet\", \"twitter-href\": \"https://www.twitter.com/PROFILE\", \"twitter-icon-color\": \"none\", \"twitter-alt\": \"\", \"google-href\": \"https://plus.google.com/PROFILE\", \"google-icon-color\": \"none\", \"google-alt\": \"\", \"instagram-icon-color\": \"none\", \"linkedin-icon-color\": \"none\", \"align\": \"left\", \"youtube-icon-color\": \"none\", \"youtube-alt\": \"\", \"youtube-icon\": \"https://s3-eu-west-1.amazonaws.com/ecomail-assets/editor/social-icos/simplewhite/youtube.png\", \"youtube-href\": \"https://www.youtube.com\", \"containerWidth\": 200 }, \"uid\": \"H1lqIiX4lm\" }], \"uid\": \"SJ3I0XVx7\" }, { \"tagName\": \"mj-column\", \"attributes\": { \"width\": \"33.333333%\", \"vertical-align\": \"top\" }, \"children\": [{ \"tagName\": \"mj-image\", \"attributes\": { \"src\": \"https://storage.googleapis.com/jan50/blackberrylogo.png\", \"padding\": \"19px 10px 10px 10px\", \"alt\": \"\", \"href\": \"\", \"containerWidth\": 200, \"width\": 100, \"widthPercent\": 50 }, \"uid\": \"rkEyL-HeQ\" }], \"uid\": \"r1e280m4xQ\" }, { \"tagName\": \"mj-column\", \"attributes\": { \"width\": \"33.333333%\", \"vertical-align\": \"top\" }, \"children\": [{ \"tagName\": \"mj-spacer\", \"attributes\": { \"height\": 15, \"containerWidth\": 200 }, \"uid\": \"rJfqLiXEgm\" }], \"uid\": \"B1W380QVxX\" }], \"layout\": 1, \"backgroundColor\": \"\", \"backgroundImage\": \"\", \"paddingTop\": 0, \"paddingBottom\": 0, \"paddingLeft\": 0, \"paddingRight\": 0, \"uid\": \"rkqIjQNe7\" }]\n    //       }\n    // ])\n\n\n  },[TOPOL_OPTIONS])\n\n\n  return (\n    <Fragment>\n      <div id=\"app\" style={{position: 'absolute', width: '100%', height: '100%'}}>\n    </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}